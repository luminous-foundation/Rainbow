.module string {
    .struct string {
        u16* text
        u64 length
    }

    struct new(u8* text u64 length) {
        VAR struct res

        INST string $res
        MOV $text $res.text
        MOV $length $res.length

        RET $res
    }

    u64 countDigits(i64 n) {
        JNE $n 0 :end_base
        RET 1
        :end_base

        VAR u64 len
        
        :loop
        JE $n 0 :end

        DIV $n 10 $n
        ADD 1 $len $len

        JMP :loop
        :end

        RET $len
    }

    struct ntos(i64 n) {
        VAR struct res

        ; Get the length of the new string
        VAR i64 len
        PUSH $n
        CALL countDigits
        POP $len

        ; Loop variables
        VAR u16 i
        VAR i8 tmp
        VAR u16 tmp2
        VAR i8 digit

        ; Check to see if the number is negative
        JGE $n 0 :negativeCheck
        MUL $n -1 $n
        ADD 1 $len $len
        ADD 1 $i $i
        :negativeCheck

        ; Create the text buffer
        VAR u8* txt
        ALLOC u8 $len $txt

        VAR u8 offset
        MOV 1 $offset

        ; Add the '-' to the beginning of the string 
        JE $i 0 :minusSign
        PMOV 45 $txt 0
        MOV 0 $offset
        :minusSign

        ; Loop through all digits
        :loop2
            JE $i $len :end2

            ; Get the current digit
            MOD $n 10 $digit
            DIV $n 10 $n

            ; Add the digit to the resulting string
            ADD 48 $digit $tmp ; 48 is ASCII '0'

            SUB $len $i $tmp2
            SUB $tmp2 $offset $tmp2

            PMOV $tmp $txt $tmp2

            ; Increment i
            ADD $i 1 $i

            JMP :loop2
        :end2

        ; Create the final string...
        PUSH $txt
        PUSH $len
        CALL string.new
        POP $res

        RET $res ; ...and return
    }

    u8* to_cstr(struct str) {
        ; Create a new string buffer
        VAR u8* newString

        VAR u64 newLength

        MOV $str.length $newLength
        ADD $newLength 1 $newLength

        ALLOC u8 $newLength $newString

        VAR u64 i

        VAR u8* textPtr
        VAR u8 curChar

        MOV $str.text $textPtr
        
        ; TODO: fix the rasm bug that makes me have to count up labels :)
        :loop3 
            JE $i $str.length :end3

            ; Get the current character
            DEREF $textPtr $curChar
            ADD $textPtr 1 $textPtr

            ; Move it into the new string
            PMOV $curChar $newString $i

            ADD $i 1 $i
            JMP :loop3
        :end3

        ; Null terminate the string
        PMOV 0 $newString $i

        ; Return the new cstr
        RET $newString
    }
}