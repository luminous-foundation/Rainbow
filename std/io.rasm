.extern u64 GetStdHandle(i32) @"Kernel32.dll"
.extern u32 WriteConsoleA(u64, u8*, i32, u64, u64) @"Kernel32.dll"

VAR u64 STD_OUT
MOV 0 $STD_OUT

VAR u8* NEWLINE
ALLOC u8 1 $NEWLINE
PMOV 10 $NEWLINE 0

void io_print(u8* text u32 len) {
    VAR u32 writeConsoleRes

    JNE $STD_OUT 0 :loop ; if STD_OUT already has a value we don't need to re-init

    ; init STD_OUT handle
    PUSH -11
    CALL GetStdHandle
    POP $STD_OUT

    :loop    
    ; TODO: figure out why i need to do this to prevent a stack underflow
    ;       because that really shouldn't be happening
    PUSH $STD_OUT
    PUSH $text
    PUSH $len
    PUSH 0
    PUSH 0
    
    PUSH $STD_OUT
    PUSH $text
    PUSH $len
    PUSH 0
    PUSH 0
    CALL WriteConsoleA
    POP $writeConsoleRes

    ; for some reason we need to just keep trying until it works
    ; why you may ask?
    ; ¯\_(ツ)_/¯
    JE $writeConsoleRes 0 :loop
}

void io_println(u8* text u32 len) {
    PUSH $text
    PUSH $len
    CALL io_print

    PUSH $NEWLINE
    PUSH 1
    CALL io_print
}