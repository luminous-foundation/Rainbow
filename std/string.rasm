.module string {
    .struct string {
        u16* text
        u64 length
    }

    struct new(u8* text u64 length) {
        VAR struct res

        INST string $res
        MOV $text $res.text
        MOV $length $res.length

        RET $res
    }

    u64 countDigits(u64 n) {
        JNE $n 0 :end_base
        RET 1
        :end_base

        VAR u64 len
        
        :loop
        JE $n 0 :end

        DIV $n 10 $n
        ADD 1 $len $len

        JMP :loop
        :end

        RET $len
    }

    struct ntos(u64 n) {
        VAR struct res

        ; Get the length of the new string
        VAR u64 len
        PUSH $n
        CALL countDigits
        POP $len

        ; Create the text buffer
        VAR u8* txt
        ALLOC u8 $len $txt

        ; Loop variables
        VAR u16 i
        VAR u8 tmp
        VAR u16 tmp2
        VAR u8 digit

        VAR u64 loopLen
        MOV $len $loopLen

        ; Loop through all digits
        :loop2
        JE $i $len :end2

        ; Get the current digit
        MOD $n 10 $digit
        DIV $n 10 $n

        ; Add the digit to the resulting string
        ADD 48 $digit $tmp

        SUB $len $i $tmp2
        SUB $tmp2 1 $tmp2

        PMOV $tmp $txt $tmp2

        ; Increment i
        ADD $i 1 $i

        JMP :loop2
        :end2

        ; Create the final string...
        PUSH $txt
        PUSH $len
        CALL string.new
        POP $res

        RET $res ; ...and return
    }
}