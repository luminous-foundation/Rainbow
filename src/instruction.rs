use crate::{_type::Type, value::Value};

#[derive(Debug, Clone)]
#[repr(u8)]
#[allow(non_camel_case_types)]
pub enum Opcode { // very large enum
    NOP                               = 0x00,
    PUSH_IMM(Value)                   = 0x01,
    PUSH_VAR(String)                  = 0x02,
    POP(String)                       = 0x03,
    LDARG_IMM(Value)                  = 0x04,
    LDARG_VAR(String)                 = 0x05,
    CALL_FUNC(String)                 = 0x06,
    CALL_VAR(String)                  = 0x07,
    ADD_I_I(Value, Value, String)     = 0x08,
    ADD_V_I(String, Value, String)    = 0x09,
    ADD_I_V(Value, String, String)    = 0x0A,
    ADD_V_V(String, String, String)   = 0x0B,
    SUB_I_I(Value, Value, String)     = 0x0C,
    SUB_V_I(String, Value, String)    = 0x0D,
    SUB_I_V(Value, String, String)    = 0x0E,
    SUB_V_V(String, String, String)   = 0x0F,
    MUL_I_I(Value, Value, String)     = 0x10,
    MUL_V_I(String, Value, String)    = 0x11,
    MUL_I_V(Value, String, String)    = 0x12,
    MUL_V_V(String, String, String)   = 0x13,
    DIV_I_I(Value, Value, String)     = 0x14,
    DIV_V_I(String, Value, String)    = 0x15,
    DIV_I_V(Value, String, String)    = 0x16,
    DIV_V_V(String, String, String)   = 0x17,
    JMP_IMM(Value)                    = 0x18,
    JMP_VAR(String)                   = 0x19,
    JNE_I_I_I(Value, Value, Value)    = 0x1A,
    JNE_V_I_I(String, Value, Value)   = 0x1B,
    JNE_I_V_I(Value, String, Value)   = 0x1C,
    JNE_V_V_I(String, String, Value)  = 0x1D,
    JNE_I_I_V(Value, Value, String)   = 0x1E,
    JNE_V_I_V(String, Value, String)  = 0x1F,
    JNE_I_V_V(Value, String, String)  = 0x20,
    JNE_V_V_V(String, String, String) = 0x21,
    JE_I_I_I(Value, Value, Value)     = 0x22,
    JE_V_I_I(String, Value, Value)    = 0x23,
    JE_I_V_I(Value, String, Value)    = 0x24,
    JE_V_V_I(String, String, Value)   = 0x25,
    JE_I_I_V(Value, Value, String)    = 0x26,
    JE_V_I_V(String, Value, String)   = 0x27,
    JE_I_V_V(Value, String, String)   = 0x28,
    JE_V_V_V(String, String, String)  = 0x29,
    JGE_I_I_I(Value, Value, Value)    = 0x2A,
    JGE_V_I_I(String, Value, Value)   = 0x2B,
    JGE_I_V_I(Value, String, Value)   = 0x2C,
    JGE_V_V_I(String, String, Value)  = 0x2D,
    JGE_I_I_V(Value, Value, String)   = 0x2E,
    JGE_V_I_V(String, Value, String)  = 0x2F,
    JGE_I_V_V(Value, String, String)  = 0x30,
    JGE_V_V_V(String, String, String) = 0x31,
    JG_I_I_I(Value, Value, Value)     = 0x32,
    JG_V_I_I(String, Value, Value)    = 0x33,
    JG_I_V_I(Value, String, Value)    = 0x34,
    JG_V_V_I(String, String, Value)   = 0x35,
    JG_I_I_V(Value, Value, String)    = 0x36,
    JG_V_I_V(String, Value, String)   = 0x37,
    JG_I_V_V(Value, String, String)   = 0x38,
    JG_V_V_V(String, String, String)  = 0x39,
    JLE_I_I_I(Value, Value, Value)    = 0x3A,
    JLE_V_I_I(String, Value, Value)   = 0x3B,
    JLE_I_V_I(Value, String, Value)   = 0x3C,
    JLE_V_V_I(String, String, Value)  = 0x3D,
    JLE_I_I_V(Value, Value, String)   = 0x3E,
    JLE_V_I_V(String, Value, String)  = 0x3F,
    JLE_I_V_V(Value, String, String)  = 0x40,
    JLE_V_V_V(String, String, String) = 0x41,
    JL_I_I_I(Value, Value, Value)     = 0x42,
    JL_V_I_I(String, Value, Value)    = 0x43,
    JL_I_V_I(Value, String, Value)    = 0x44,
    JL_V_V_I(String, String, Value)   = 0x45,
    JL_I_I_V(Value, Value, String)    = 0x46,
    JL_V_I_V(String, Value, String)   = 0x47,
    JL_I_V_V(Value, String, String)   = 0x48,
    JL_V_V_V(String, String, String)  = 0x49,
    MOV_IMM(Value)                    = 0x4A,
    MOV_VAR(String)                   = 0x4B,
    AND_I_I(Value, Value, String)     = 0x4C,
    AND_V_I(String, Value, String)    = 0x4D,
    AND_I_V(Value, String, String)    = 0x4E,
    AND_V_V(String, String, String)   = 0x4F,
    OR_I_I(Value, Value, String)      = 0x50,
    OR_V_I(String, Value, String)     = 0x51,
    OR_I_V(Value, String, String)     = 0x52,
    OR_V_V(String, String, String)    = 0x53,
    XOR_I_I(Value, Value, String)     = 0x54,
    XOR_V_I(String, Value, String)    = 0x55,
    XOR_I_V(Value, String, String)    = 0x56,
    XOR_V_V(String, String, String)   = 0x57,
    NOT_IMM(Value)                    = 0x58,
    NOT_VAR(String)                   = 0x59,
    LSH_I_I(Value, Value, String)     = 0x5A,
    LSH_V_I(String, Value, String)    = 0x5B,
    LSH_I_V(Value, String, String)    = 0x5C,
    LSH_V_V(String, String, String)   = 0x5D,
    RSH_I_I(Value, Value, String)     = 0x5E,
    RSH_V_I(String, Value, String)    = 0x5F,
    RSH_I_V(Value, String, String)    = 0x60,
    RSH_V_V(String, String, String)   = 0x61,
    VAR_TYPE(Type, String)            = 0x62,
    VAR_VAR(String, String)           = 0x63,
    RET                               = 0x64,
    RET_IMM(Value)                    = 0x65,
    RET_VAR(String)                   = 0x66,
    DEREF_IMM(Value, String)          = 0x67,
    DEREF_VAR(String, String)         = 0x68,
    REF(String, String)               = 0x69,
    INST_NAME(String)                 = 0x6A,
    INST_VAR(String)                  = 0x6B,
}

impl Opcode {
    pub fn to_u8(self: &Opcode) -> u8 {
        match self {
            Opcode::NOP                => 0x00,
            Opcode::PUSH_IMM(_)        => 0x01,
            Opcode::PUSH_VAR(_)        => 0x02,
            Opcode::POP(_)             => 0x03,
            Opcode::LDARG_IMM(_)       => 0x04,
            Opcode::LDARG_VAR(_)       => 0x05,
            Opcode::CALL_FUNC(_)       => 0x06,
            Opcode::CALL_VAR(_)        => 0x07,
            Opcode::ADD_I_I(_, _, _)   => 0x08,
            Opcode::ADD_V_I(_, _, _)   => 0x09,
            Opcode::ADD_I_V(_, _, _)   => 0x0A,
            Opcode::ADD_V_V(_, _, _)   => 0x0B,
            Opcode::SUB_I_I(_, _, _)   => 0x0C,
            Opcode::SUB_V_I(_, _, _)   => 0x0D,
            Opcode::SUB_I_V(_, _, _)   => 0x0E,
            Opcode::SUB_V_V(_, _, _)   => 0x0F,
            Opcode::MUL_I_I(_, _, _)   => 0x10,
            Opcode::MUL_V_I(_, _, _)   => 0x11,
            Opcode::MUL_I_V(_, _, _)   => 0x12,
            Opcode::MUL_V_V(_, _, _)   => 0x13,
            Opcode::DIV_I_I(_, _, _)   => 0x14,
            Opcode::DIV_V_I(_, _, _)   => 0x15,
            Opcode::DIV_I_V(_, _, _)   => 0x16,
            Opcode::DIV_V_V(_, _, _)   => 0x17,
            Opcode::JMP_IMM(_)         => 0x18,
            Opcode::JMP_VAR(_)         => 0x19,
            Opcode::JNE_I_I_I(_, _, _) => 0x1A,
            Opcode::JNE_V_I_I(_, _, _) => 0x1B,
            Opcode::JNE_I_V_I(_, _, _) => 0x1C,
            Opcode::JNE_V_V_I(_, _, _) => 0x1D,
            Opcode::JNE_I_I_V(_, _, _) => 0x1E,
            Opcode::JNE_V_I_V(_, _, _) => 0x1F,
            Opcode::JNE_I_V_V(_, _, _) => 0x20,
            Opcode::JNE_V_V_V(_, _, _) => 0x21,
            Opcode::JE_I_I_I(_, _, _)  => 0x22,
            Opcode::JE_V_I_I(_, _, _)  => 0x23,
            Opcode::JE_I_V_I(_, _, _)  => 0x24,
            Opcode::JE_V_V_I(_, _, _)  => 0x25,
            Opcode::JE_I_I_V(_, _, _)  => 0x26,
            Opcode::JE_V_I_V(_, _, _)  => 0x27,
            Opcode::JE_I_V_V(_, _, _)  => 0x28,
            Opcode::JE_V_V_V(_, _, _)  => 0x29,
            Opcode::JGE_I_I_I(_, _, _) => 0x2A,
            Opcode::JGE_V_I_I(_, _, _) => 0x2B,
            Opcode::JGE_I_V_I(_, _, _) => 0x2C,
            Opcode::JGE_V_V_I(_, _, _) => 0x2D,
            Opcode::JGE_I_I_V(_, _, _) => 0x2E,
            Opcode::JGE_V_I_V(_, _, _) => 0x2F,
            Opcode::JGE_I_V_V(_, _, _) => 0x30,
            Opcode::JGE_V_V_V(_, _, _) => 0x31,
            Opcode::JG_I_I_I(_, _, _)  => 0x32,
            Opcode::JG_V_I_I(_, _, _)  => 0x33,
            Opcode::JG_I_V_I(_, _, _)  => 0x34,
            Opcode::JG_V_V_I(_, _, _)  => 0x35,
            Opcode::JG_I_I_V(_, _, _)  => 0x36,
            Opcode::JG_V_I_V(_, _, _)  => 0x37,
            Opcode::JG_I_V_V(_, _, _)  => 0x38,
            Opcode::JG_V_V_V(_, _, _)  => 0x39,
            Opcode::JLE_I_I_I(_, _, _) => 0x3A,
            Opcode::JLE_V_I_I(_, _, _) => 0x3B,
            Opcode::JLE_I_V_I(_, _, _) => 0x3C,
            Opcode::JLE_V_V_I(_, _, _) => 0x3D,
            Opcode::JLE_I_I_V(_, _, _) => 0x3E,
            Opcode::JLE_V_I_V(_, _, _) => 0x3F,
            Opcode::JLE_I_V_V(_, _, _) => 0x40,
            Opcode::JLE_V_V_V(_, _, _) => 0x41,
            Opcode::JL_I_I_I(_, _, _)  => 0x42,
            Opcode::JL_V_I_I(_, _, _)  => 0x43,
            Opcode::JL_I_V_I(_, _, _)  => 0x44,
            Opcode::JL_V_V_I(_, _, _)  => 0x45,
            Opcode::JL_I_I_V(_, _, _)  => 0x46,
            Opcode::JL_V_I_V(_, _, _)  => 0x47,
            Opcode::JL_I_V_V(_, _, _)  => 0x48,
            Opcode::JL_V_V_V(_, _, _)  => 0x49,
            Opcode::MOV_IMM(_)         => 0x4A,
            Opcode::MOV_VAR(_)         => 0x4B,
            Opcode::AND_I_I(_, _, _)   => 0x4C,
            Opcode::AND_V_I(_, _, _)   => 0x4D,
            Opcode::AND_I_V(_, _, _)   => 0x4E,
            Opcode::AND_V_V(_, _, _)   => 0x4F,
            Opcode::OR_I_I(_, _, _)    => 0x50,
            Opcode::OR_V_I(_, _, _)    => 0x51,
            Opcode::OR_I_V(_, _, _)    => 0x52,
            Opcode::OR_V_V(_, _, _)    => 0x53,
            Opcode::XOR_I_I(_, _, _)   => 0x54,
            Opcode::XOR_V_I(_, _, _)   => 0x55,
            Opcode::XOR_I_V(_, _, _)   => 0x56,
            Opcode::XOR_V_V(_, _, _)   => 0x57,
            Opcode::NOT_IMM(_)         => 0x58,
            Opcode::NOT_VAR(_)         => 0x59,
            Opcode::LSH_I_I(_, _, _)   => 0x5A,
            Opcode::LSH_V_I(_, _, _)   => 0x5B,
            Opcode::LSH_I_V(_, _, _)   => 0x5C,
            Opcode::LSH_V_V(_, _, _)   => 0x5D,
            Opcode::RSH_I_I(_, _, _)   => 0x5E,
            Opcode::RSH_V_I(_, _, _)   => 0x5F,
            Opcode::RSH_I_V(_, _, _)   => 0x60,
            Opcode::RSH_V_V(_, _, _)   => 0x61,
            Opcode::VAR_TYPE(_, _)     => 0x62,
            Opcode::VAR_VAR(_, _)      => 0x63,
            Opcode::RET                => 0x64,
            Opcode::RET_IMM(_)         => 0x65,
            Opcode::RET_VAR(_)         => 0x66,
            Opcode::DEREF_IMM(_, _)    => 0x67,
            Opcode::DEREF_VAR(_, _)    => 0x68,
            Opcode::REF(_, _)          => 0x69,
            Opcode::INST_NAME(_)       => 0x6A,
            Opcode::INST_VAR(_)        => 0x6B,
        }
    }
}

#[derive(Debug)]
pub struct Instruction {
    pub index: usize,

    pub opcode: Opcode,
}